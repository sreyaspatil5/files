Docker Notes – From Basic to Advanced

Basics

What is Docker?
Docker is a platform for developing, shipping, and running applications in lightweight containers.

Why use Docker?
•Portable: Same environment across development, testing, and production.
•Lightweight: Containers share the OS kernel.
•Fast: Containers start instantly compared to VMs.

Key Concepts:
•Image: Blueprint of a container (like a class).
•Container: Running instance of an image.
•Dockerfile: Script to create Docker images.
•Docker Hub: Registry for storing Docker images.
•Volume: Persistent data storage.
•Network: Communication bridge between containers.
________________________________________

Common Docker Commands

docker pull <image>	Download image from Docker Hub
docker run -d -p 8080:80 <image>	Run container in detached mode
docker ps -a	List all containers
docker exec -it <container_id> bash	Access container shell
docker stop <container_id>	Stop container
docker rm <container_id>	Remove container
docker rmi <image>	Remove image
docker build -t myimage:v1 .	Build image using Dockerfile
________________________________________

Dockerfile Template

FROM openjdk:17-jdk-slim
WORKDIR /app
COPY target/my-app.jar my-app.jar
EXPOSE 8080
CMD ["java", "-jar", "my-app.jar"]
________________________________________

Docker Compose Overview

What is Docker Compose?
A tool for defining and running multi-container Docker applications with a single docker-compose.yml file.

Common Commands:

docker-compose up -d	Run all services in background
docker-compose down	Stop and remove services
docker-compose logs	Check logs
docker-compose ps	List all containers managed by Compose
________________________________________

3-Tier Project Docker Deployment on AWS EC2

EC2 Setup

1.	Create EC2 Instance
o	OS: Ubuntu
o	Type: t2.medium
o	Storage: 20 GB
o	Inbound Rules: SSH, HTTP, HTTPS, All TCP - IPv4 Anywhere
2.	SSH Connection & Project Transfer
o	Use WinSCP to copy frontend and backend folders.
o	Move them into a proper folder:
o	mkdir project
o	sudo mv <project-folder-name> project/
3.	Rename backend JAR
o	Rename file with meaningful name:
o	mv oldname.jar Quantumsoft.jar
________________________________________

Docker Installation & Setup

sudo apt-get update
sudo apt-get install docker.io -y
sudo systemctl status docker     # Check Docker service
sudo usermod -aG docker $USER
newgrp docker                    # Refresh group
docker --version                 # Check Docker version
Install Docker Compose
sudo apt-get install docker-compose -y
sudo apt-get install docker-compose-plugin

# Manual Installation (Latest)
sudo curl -SL https://github.com/docker/compose/releases/download/v2.32.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
________________________________________

Frontend Setup (Angular)

Configurations

1.	Update Config.js with EC2 public IP
2.	cd config
3.	sudo nano Config.js

4.	Create default.conf for NGINX:

server {
  listen 80;
  server_name PUBLICIPADDRESS;
 
   # Serve Angular application
   root /usr/share/nginx/html;
   index index.html;
 
  location / {
      try_files $uri $uri/ /index.html;
   }
 
   # Proxy API requests to Spring Boot service
  location /api/ {
      proxy_pass http://backend:8080;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
   }
 
   # Error handling for Angular routes
  error_page 404 /index.html;
   location = /index.html {
      allow all;
   }
}

5.	Copy dist files:
6.	cp -rf ./* dist
7.	Create Dockerfile for frontend:

FROM nginx:latest
COPY dist/ /usr/share/nginx/html
RUN chmod -R 755 /usr/share/nginx/html && chown -R nginx:nginx /usr/share/nginx/html
COPY default.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

8.	Build and Push Docker image:
9.	docker build -t spquantum/frontend:v1 .
10.	docker push spquantum/frontend:v1 .
________________________________________

Backend Setup 

1.	Create Dockerfile for backend:

# Use an official Java runtime as a parent image
FROM openjdk:17-jdk-slim
# Set the
WORKDIR /app
# Copy the jar file into the container
COPY target/QuantumSoft-0.0.1-SNAPSHOT.jar QuantumSoft-0.0.1-SNAPSHOT.jar
# Make the port available to the outside world
EXPOSE 8080
# Run the jar file
CMD ["java", "-jar", "QuantumSoft-0.0.1-SNAPSHOT.jar"]
________________________________________

Docker Compose File (docker-compose.yml)

version: '3.4'

services:
  backend:
    build:
      context: ./backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-service:3306/quantumsoft
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    ports:
      - "8080:8080"
    depends_on:
      mysql-service:
        condition: service_healthy
    networks:
      - mynetwork

  frontend:
    build:
      context: ./frontend
    ports:
      - "5502:80"
    depends_on:
      - backend
    networks:
      - mynetwork

  mysql-service:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_DATABASE: "quantumsoft"
      MYSQL_USER: "root"
      MYSQL_PASSWORD: "root"
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s

networks:
  mynetwork:

volumes:
  mysql-data:
________________________________________

Run the Application

docker-compose up -d     # Start containers
docker ps                # Check running containers
docker exec -it <container_id> bash  # Enter container
MySQL Access Inside Container
mysql -u root -p
SHOW DATABASES;
USE quantumsoft;
SHOW TABLES;
SELECT * FROM <table_name>;

